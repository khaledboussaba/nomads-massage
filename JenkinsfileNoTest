pipeline {
    agent any
    tools {
        maven 'm3'
    }
    stages{
        stage ('Checkout'){
            steps{
                echo "`-._,-'`-._,-'`-._,-'`-._,-'===Checkout===`-._,-'`-._,-'`-._,-'`-._,-'"
                git credentialsId: 'GitLabNomadsMassage', url: 'https://gitlab.com/nomadsgroupe/nomadsrest.git'
                // sh 'ls -laR'
            }
        }
        stage ('Cleaning'){
            steps{
                echo "`-._,-'`-._,-'`-._,-'`-._,-'===Cleaning===`-._,-'`-._,-'`-._,-'`-._,-'"
                sh "mvn -f nomadsProjectStocksItf/pom.xml clean  | sed 's/^/      /'"
                sh "mvn -f AnnuaireMasseurItf/pom.xml clean  | sed 's/^/      /'"
                sh "mvn -f wsRestCurrenciesItf/pom.xml clean  | sed 's/^/      /'"
                sh "mvn -f nomadsProjectSpringBootJsfItf/pom.xml clean  | sed 's/^/      /'"
                
                sh "mvn -f nomadsProjectStocks/pom.xml clean  | sed 's/^/      /'"
                sh "mvn -f AnnuaireMasseur/pom.xml clean  | sed 's/^/      /'"
                sh "mvn -f wsRestCurrencies/pom.xml clean  | sed 's/^/      /'"
                sh "mvn -f nomadsProjectSpringBootJsfWsRest/pom.xml clean  | sed 's/^/      /'"
                sh "mvn -f nomadsProjectSpringBootJsfWeb/pom.xml clean  | sed 's/^/      /'"
                
            }
        }
        stage ('install ITF'){
            steps{
                echo "`-._,-'`-._,-'`-._,-'`-._,-'===install ITF===`-._,-'`-._,-'`-._,-'`-._,-'"
                sh "mvn -f nomadsProjectStocksItf/pom.xml install -Dmaven.test.skip=true -Dspring-boot.run.profiles=configEclipse,initData | sed 's/^/      /'"
                sh "mvn -f AnnuaireMasseurItf/pom.xml install -Dmaven.test.skip=true -Dspring-boot.run.profiles=configEclipse,initData | sed 's/^/      /'"
                sh "mvn -f wsRestCurrenciesItf/pom.xml install -Dmaven.test.skip=true -Dspring-boot.run.profiles=configEclipse,initData | sed 's/^/      /'"
                sh "mvn -f nomadsProjectSpringBootJsfItf/pom.xml install -Dmaven.test.skip=true -Dspring-boot.run.profiles=configEclipse,initData | sed 's/^/      /'"
                

            }
            
        }
	    stage ('Packaging'){
            steps{
                echo "`-._,-'`-._,-'`-._,-'`-._,-'===Packaging===`-._,-'`-._,-'`-._,-'`-._,-'"
        
                sh "mvn -f nomadsProjectStocks/pom.xml package -Dmaven.test.skip=true -Dspring-boot.run.profiles=configEclipse,initData | sed 's/^/      /'"
                sh "mvn -f AnnuaireMasseur/pom.xml package -Dmaven.test.skip=true -Dspring-boot.run.profiles=configEclipse,initData | sed 's/^/      /'"
                sh "mvn -f wsRestCurrencies/pom.xml package -Dmaven.test.skip=true -Dspring-boot.run.profiles=configEclipse,initData | sed 's/^/      /'"
                sh "mvn -f nomadsProjectSpringBootJsfWsRest/pom.xml package -Dmaven.test.skip=true -Dspring-boot.run.profiles=configEclipse,initData | sed 's/^/      /'"
                sh "mvn -f nomadsProjectSpringBootJsfWeb/pom.xml package -Dmaven.test.skip=true -Dspring-boot.run.profiles=configEclipse,initData | sed 's/^/      /'"
            }
        }
        stage ('Cleaning Dockers'){
            steps{
                echo "`-._,-'`-._,-'`-._,-'`-._,-'===Cleaning Dockers only because build successS===`-._,-'`-._,-'`-._,-'`-._,-'"
                script {
                    try {
                        sh 'docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)'
                    }catch (Exception e) {
                        echo 'no contenaire to remove!!!'
                    }
                    try {
                        sh 'docker rmi -f $(docker images -q)'
                    }catch (Exception e) {
                        echo 'no contenaire to remove!!!'
                    }
                    try {
                        sh 'docker volume rm $(docker volume ls -q)'
                    }catch (Exception e) {
                        echo 'no volume to remove!!!'
                    }
                    try {
                        sh 'docker network prune -f'
                    }catch (Exception e) {
                        echo 'no network to remove!!!'
                    }

                }                
            }
        }
        stage ('docker build'){
            steps{
                echo "`-._,-'`-._,-'`-._,-'`-._,-'===Docker build image stage===`-._,-'`-._,-'`-._,-'`-._,-'"
				sh "docker-compose -f ./AnnuaireMasseur/docker-compose.yml -p annuaire up -d"
				sh "docker-compose -f ./nomadsProjectStocks/docker-compose.yml -p stocks up -d"
                sh "docker-compose -f ./nomadsProjectSpringBootJsfWsRest/docker-compose.yml -p rest up -d"
                sh "docker-compose -f ./wsRestCurrencies/docker-compose.yml -p currency up -d"
                sh "docker-compose -f ./nomadsProjectSpringBootJsfWeb/docker-compose.yml -p web up -d"
              
            }
        }
        
    }
    
}

